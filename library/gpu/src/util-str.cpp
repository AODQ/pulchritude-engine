#include <util.hpp>

#include <volk.h>

#include <string>

std::string util::str::vkImageLayout(VkImageLayout const layout) {
  switch (layout) {
    case VK_IMAGE_LAYOUT_UNDEFINED:
      return "VK_IMAGE_LAYOUT_UNDEFINED";
    case VK_IMAGE_LAYOUT_GENERAL:
      return "VK_IMAGE_LAYOUT_GENERAL";
    case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL:
      return "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL:
      return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL:
      return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL:
      return "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL:
      return "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL";
    case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL:
      return "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL";
    case VK_IMAGE_LAYOUT_PREINITIALIZED:
      return "VK_IMAGE_LAYOUT_PREINITIALIZED";
    case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL:
      return "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL:
      return "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_PRESENT_SRC_KHR:
      return "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR";
    case VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR:
      return "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR";
    case VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV:
      return "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV";
    default:
      return "VK_IMAGE_LAYOUT_UNKNOWN";
  }
}

std::string util::str::vkAccessFlags(VkAccessFlags const flags) {
  std::string str = "";
    if (flags & VK_ACCESS_INDIRECT_COMMAND_READ_BIT) {
      str += "VK_ACCESS_INDIRECT_COMMAND_READ_BIT | ";
    }
    if (flags & VK_ACCESS_INDEX_READ_BIT) {
      str += "VK_ACCESS_INDEX_READ_BIT | ";
    }
    if (flags & VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT) {
      str += "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT | ";
    }
    if (flags & VK_ACCESS_UNIFORM_READ_BIT) {
      str += "VK_ACCESS_UNIFORM_READ_BIT | ";
    }
    if (flags & VK_ACCESS_INPUT_ATTACHMENT_READ_BIT) {
      str += "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT | ";
    }
    if (flags & VK_ACCESS_SHADER_READ_BIT) {
      str += "VK_ACCESS_SHADER_READ_BIT | ";
    }
    if (flags & VK_ACCESS_SHADER_WRITE_BIT) {
      str += "VK_ACCESS_SHADER_WRITE_BIT | ";
    }
    if (flags & VK_ACCESS_COLOR_ATTACHMENT_READ_BIT) {
      str += "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | ";
    }
    if (flags & VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT) {
      str += "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT | ";
    }
    if (flags & VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT) {
      str += "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT | ";
    }
    if (flags & VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT) {
      str += "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT | ";
    }
    if (flags & VK_ACCESS_TRANSFER_READ_BIT) {
      str += "VK_ACCESS_TRANSFER_READ_BIT | ";
    }
    if (flags & VK_ACCESS_TRANSFER_WRITE_BIT) {
      str += "VK_ACCESS_TRANSFER_WRITE_BIT | ";
    }
    if (flags & VK_ACCESS_HOST_READ_BIT) {
      str += "VK_ACCESS_HOST_READ_BIT | ";
    }
    if (flags & VK_ACCESS_HOST_WRITE_BIT) {
      str += "VK_ACCESS_HOST_WRITE_BIT | ";
    }
    if (flags & VK_ACCESS_MEMORY_READ_BIT) {
      str += "VK_ACCESS_MEMORY_READ_BIT | ";
    }
    if (flags & VK_ACCESS_MEMORY_WRITE_BIT) {
      str += "VK_ACCESS_MEMORY_WRITE_BIT | ";
    }
    if (flags & VK_ACCESS_NONE) {
      str += "VK_ACCESS_NONE | ";
    }
    if (flags & VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT) {
      str += "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT | ";
    }
    if (flags & VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT) {
      str += "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT | ";
    }
    if (flags & VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT) {
      str += "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT | ";
    }
    if (flags & VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT) {
      str += "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT | ";
    }
    if (flags & VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT) {
      str += "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT | ";
    }
    if (flags & VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR) {
      str += "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | ";
    }
    if (flags & VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR) {
      str += "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR | ";
    }
    if (flags & VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT) {
      str += "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT | ";
    }
    if (flags & VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR) {
      str += "VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR | ";
    }
    if (flags & VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV) {
      str += "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV | ";
    }
    if (flags & VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV) {
      str += "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV | ";
    }
    if (flags & VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV) {
      str += "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV | ";
    }
    if (flags & VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV) {
      str += "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV | ";
    }
    if (flags & VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV) {
      str += "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV | ";
    }
    if (flags & VK_ACCESS_NONE_KHR) {
      str += "VK_ACCESS_NONE_KHR | ";
    }
    if (flags & VK_ACCESS_FLAG_BITS_MAX_ENUM) {
      str += "VK_ACCESS_FLAG_BITS_MAX_ENUM | ";
    }
    return "(" + ((str.size() > 3) ? str.substr(0, str.size() - 3) : str) + ")";
}
