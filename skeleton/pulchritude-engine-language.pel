@include `error`;
@include `string`;
@include `time`;

@enum PuleErrorEL {
  none;
  compileError;
};

@entity PuleELModule;

@struct PuleELModuleCreateInfo {
  @field moduleIR : PuleStringView;
  @field name : PuleStringView;
  @field optimize : bool = true;
  @field debug : bool = false;
  @field error : PuleError ptr;
};

@fn puleELModuleCreate(ci : PuleELModuleCreateInfo) PuleELModule;
@fn puleELModuleDestroy(module : PuleELModule);

@entity PuleELEngine;

@struct PuleELEngineCreateInfo {
  @field insertEngineSymbols : bool = true;
};
@fn puleELEngineCreate(ci : PuleELEngineCreateInfo) PuleELEngine;
@fn puleELEngineDestroy(engine : PuleELEngine);
@fn puleELEngineAddModule(engine : PuleELEngine, module : PuleELModule);

@entity PuleELFence;
@fn puleELFenceWait(fence : PuleELFence, timeout : PuleMicrosecond) bool;
@fn puleELFenceDestroy(fence : PuleELFence);

@entity PuleELQueue;

@fn puleELQueueCreate(engine : PuleELEngine) PuleELQueue;
@fn puleELQueueDestroy(queue : PuleELQueue);

@fn puleELQueueStackLength(queue : PuleELQueue) size_t;
@fn puleELQueueStackPush(queue : PuleELQueue, value : uint64_t);
@fn puleELQueueStackPop(queue : PuleELQueue) uint64_t;

@fn puleELQueueSubmit(
  queue : PuleELQueue,
  functionName : PuleStringView
);
