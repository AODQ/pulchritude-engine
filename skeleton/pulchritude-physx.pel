@struct PulePhysxCollisionResultShape {
  @field hit : bool;
  @field distance : float;
  @field origin : PuleF32v3;
};

@struct PulePhysxCollisionResultMesh {
  @field hit : bool;
  @field distance : float;
  @field origin : PuleF32v3;
  @field triangleIndex : uint32_t;
  @field barycentric : PuleF32v2;
};

@struct PulePhysxRay {
  @field origin : PuleF32v3;
  @field direction : PuleF32v3;
};

@enum PulePhysxCollisionShapeType {
  PulePhysxCollisionShapeType_sphere;
  PulePhysxCollisionShapeType_box;
  PulePhysxCollisionShapeType_capsule;
  PulePhysxCollisionShapeType_plane;
  PulePhysxCollisionShapeType_triangle;
};

@struct PulePhysxCollisionShapeSphere {
  @field radius : float;
};
@struct PulePhysxCollisionShapeBox {
  @field halfExtent : PuleF32v3;
};
@struct PulePhysxCollisionShapeCapsule {
  @field radius : float;
  @field height : float;
};
@struct PulePhysxCollisionShapePlane {
  @field normal : PuleF32v3;
  @field distance : float;
};
@struct PulePhysxCollisionShapeTriangle {
  @field origins : PuleF32v3 @arr[3];
};

@union PulePhysxCollisionShapeUnion {
  @field sphere : PulePhysxCollisionShapeSphere;
  @field box : PulePhysxCollisionShapeBox;
  @field capsule : PulePhysxCollisionShapeCapsule;
  @field plane : PulePhysxCollisionShapePlane;
  @field triangle : PulePhysxCollisionShapeTriangle;
};

@struct PulePhysxCollisionShape {
  @field type : PulePhysxCollisionShapeType;
  @field shape : PulePhysxCollisionShapeUnion;
};

@struct PulePhysxCollisionMesh {
  @field origins : PuleF32v3 ptr;
  @field indices : uint32_t ptr;
  @field originCount : size_t;
  @field indexCount : size_t;
};

@enum PulePhysxMode {
  PulePhysxMode_2d;
  PulePhysxMode_3d;
};

@fn pulePhysxRaycastShape(
  mode : PulePhysxMode,
  ray : PulePhysxRay,
  shapeTransform : PuleF32m44,
  shape : PulePhysxCollisionShape
) PulePhysxCollisionResultShape;

@fn pulePhysxRaycastMesh(
  mode : PulePhysxMode,
  ray : PulePhysxRay,
  meshTransform : PuleF32m44,
  mesh : PulePhysxCollisionMesh
) PulePhysxCollisionResultMesh;

@fn pulePhysxShapeOverlapShape(
  mode : PulePhysxMode,
  shape1Transform : PuleF32m44,
  shape1 : PulePhysxCollisionShape,
  shape2Transform : PuleF32m44,
  shape2 : PulePhysxCollisionShape
) bool;

@fn pulePhysxShapeOverlapMesh(
  mode : PulePhysxMode,
  shapeTransform : PuleF32m44,
  shape : PulePhysxCollisionShape,
  meshTransform : PuleF32m44,
  mesh : PulePhysxCollisionMesh
) bool;

@entity PulePhysx2DWorld;

@entity PulePhysx2DBody;

@enum PulePhysx2DShapeType {
  PulePhysx2DShapeType_convexPolygon;
};

@struct PulePhysx2DShapeConvexPolygon {
  @field centroid : PuleF32v2;
  @field origins : PuleF32v2 @arr[8];
  @field normals : PuleF32v2 @arr[8];
  @field vertexCount : uint32_t;
};

@union PulePhysx2DShapeUnion {
  @field convexPolygon : PulePhysx2DShapeConvexPolygon;
};

@struct PulePhysx2DShape {
  @field type : PulePhysx2DShapeType;
  @field shape : PulePhysx2DShapeUnion;
};

@fn pulePhysx2DWorldCreate() PulePhysx2DWorld;
@fn pulePhysx2DWorldDestroy(world : PulePhysx2DWorld) void;

@fn pulePhysx2DWorldGravitySet(
  world : PulePhysx2DWorld,
  gravity : PuleF32v2
) void;

@fn pulePhysx2DWorldStep(
  world : PulePhysx2DWorld,
  timeStep : float,
  velocityIterations : int,
  positionIterations : int
) void;

@enum PulePhysx2DBodyType {
  PulePhysx2DBodyType_static;
  PulePhysx2DBodyType_kinematic;
  PulePhysx2DBodyType_dynamic;
};

@struct PulePhysx2DBodyCreateInfo {
  @field type : PulePhysx2DBodyType = PulePhysx2DBodyType_static;
  @field origin : PuleF32v2 #` TODO = {0.0f, 0.0f} `;
  @field originVelocity : PuleF32v2 #` = {0.0f, 0.0f} `;
  @field originDamping : float = 0.0f;
  @field angle : float = 0.0f;
  @field angleVelocity : float = 0.0f;
  @field angleDamping : float = 0.0f;
  @field gravityScale : float = 1.0f;
  @field allowSleep : bool = true;
  @field startAwake : bool = true;
  @field startEnabled : bool = true;
  @field fixedRotation : bool = false;
  @field bullet : bool = false;
  @field userData : void ptr = nullptr;
};

@fn pulePhysx2DBodyCreate(
  world : PulePhysx2DWorld,
  createInfo : PulePhysx2DBodyCreateInfo
) PulePhysx2DBody;

@fn pulePhysx2DBodyDestroy(
  world : PulePhysx2DWorld,
  body : PulePhysx2DBody
) void;

@fn pulePhysx2DBodyPosition(
  world : PulePhysx2DWorld,
  body : PulePhysx2DBody
) PuleF32v2;

@fn pulePhysx2DBodyAngle(
  world : PulePhysx2DWorld,
  body : PulePhysx2DBody
) float;

@struct PulePhysx2DBodyAttachShapeCreateInfo {
  @field friction : float = 0.2f;
  @field density : float = 0.0f;
  @field restitution : float = 0.0f;
  @field restitutionThreshold : float = 1.0f;
  @field isSensor : bool = false;
  @field userData : void ptr = nullptr;
  @field collisionCategoryBits : uint16_t = 0x0001;
  @field collisionMaskBits : uint16_t = 0xFFFF;
  @field collisionGroup : uint16_t = 0;
};

@fn pulePhysx2DBodyAttachShape(
  world : PulePhysx2DWorld,
  body : PulePhysx2DBody,
  shape : PulePhysx2DShape,
  createInfo : PulePhysx2DBodyAttachShapeCreateInfo
) void;

@fn pulePhysx2DShapeCreateConvexPolygonAsBox(
  origin : PuleF32v2,
  halfExtents : PuleF32v2,
  angle : float
) PulePhysx2DShape;
