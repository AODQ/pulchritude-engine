@include `error`;
@include `math`;
@include `string`;

@enum PulePlatformVsyncMode {
  none;
  double;
  triple;
};

@enum PuleErrorWindow {
  none;
  windowCreationFailed;
  invalidConfiguration;
};

@struct PulePlatformCreateInfo {
  @field name : PuleStringView;
  @field width : size_t #` <= 7680, can leave at 0 for full screen `;
  @field height : size_t #` // <= 4320, can leave at 0 for full screen `;
  @field vsyncMode : PulePlatformVsyncMode;
};

@struct PulePlatform {
  @field id : uint64_t;
};

@fn pulePlatformInitialize(error : PuleError ptr) void;
@fn pulePlatformShutdown() void;
@fn pulePlatformCreate(
  info : PulePlatformCreateInfo, error : PuleError ptr
) PulePlatform;
@fn pulePlatformDestroy(window : PulePlatform) void;

@fn pulePlatformShouldExit(window : PulePlatform) bool;

@fn pulePlatformGetProcessAddress() void ptr #`
  TODO these need to pass in platform (puleGpuInitialize)
`;
@fn pulePlatformRequiredExtensions(
  count : uint32_t ptr
) char const ptr ptr;

@fn pulePlatformPollEvents(window : PulePlatform) void;
@fn pulePlatformSwapFramebuffer(window : PulePlatform) void;

@fn pulePlatformWindowSize(
  window : PulePlatform
) PuleI32v2;
@fn pulePlatformFramebufferSize(window : PulePlatform) PuleI32v2;

@struct PulePlatformFramebufferResizeCallbackCreateInfo {
  @field callback : @fnptr(void, PuleI32v2);
};

@fn pulePlatformFramebufferResizeCallback(
  info : PulePlatformFramebufferResizeCallbackCreateInfo
) void;

@struct PulePlatformWindowResizeCallbackCreateInfo {
  @field callback : @fnptr(void, PuleI32v2);
};

@fn pulePlatformWindowResizeCallback(
  info : PulePlatformWindowResizeCallbackCreateInfo
) void;

@fn pulePlatformGetTime() double;

@fn pulePlatformNull(window : PulePlatform) bool;

@fn pulePlatformFocused(window : PulePlatform) bool;

@fn pulePlatformMouseOriginSet(
  window : PulePlatform, origin : PuleI32v2
) void;
@fn pulePlatformMouseOrigin(
  window : PulePlatform
) PuleI32v2;
@fn pulePlatformCursorEnabled(window : PulePlatform) bool;
@fn pulePlatformCursorHide(window : PulePlatform) void;
@fn pulePlatformCursorShow(window : PulePlatform) void;

@enum PuleInputKey {
  tab;
  left;
  right;
  up;
  down;
  pageUp;
  pageDown;
  home;
  end;
  insert;
  delete;
  backspace;
  space;
  enter;
  escape;
  apostrophe;
  comma;
  minus;
  period;
  slash;
  semicolon;
  equal;
  leftBracket;
  backslash;
  rightBracket;
  graveAccent;
  capsLock;
  scrollLock;
  numLock;
  printScreen;
  pause;
  kp0;
  kp1;
  kp2;
  kp3;
  kp4;
  kp5;
  kp6;
  kp7;
  kp8;
  kp9;
  kpDecimal;
  kpDivide;
  kpMultiply;
  kpSubtract;
  kpAdd;
  kpEnter;
  kpEqual;
  leftShift;
  leftControl;
  leftAlt;
  leftSuper;
  rightShift;
  rightControl;
  rightAlt;
  rightSuper;
  menu;
  i0;
  i1;
  i2;
  i3;
  i4;
  i5;
  i6;
  i7;
  i8;
  i9;
  a;
  b;
  c;
  d;
  e;
  f;
  g;
  h;
  i;
  j;
  k;
  l;
  m;
  n;
  o;
  p;
  q;
  r;
  s;
  t;
  u;
  v;
  w;
  x;
  y;
  z;
  f1;
  f2;
  f3;
  f4;
  f5;
  f6;
  f7;
  f8;
  f9;
  f10;
  f11;
  f12;
};

@bitfield PuleInputKeyModifier {
  ctrl = 0x1;
  shift = 0x2;
  alt = 0x4;
  super = 0x8;
};

@enum PuleInputMouse {
  left;
  right;
  middle;
  side1;
  side2;
  End;
};

@fn puleInputKey(
  window : PulePlatform,
  key : PuleInputKey
) bool;
@fn puleInputKeyModifiers(
  window : PulePlatform
) PuleInputKeyModifier;
@fn puleInputMouse(
  window : PulePlatform,
  mouseKey : PuleInputMouse
) bool;

@fn puleInputScroll(window : PulePlatform) int32_t;

@struct PuleInputKeyCallbackCreateInfo {
  #` TODO fix this to allow multiline in parser (bool waspressed)`
  @field callback : @fnptr(void, PuleInputKey, PuleInputKeyModifier, bool);
};

@fn puleInputKeyCallback(
  info : PuleInputKeyCallbackCreateInfo
) void #`
callback for keyboard input, for event-driven applications such as text
editors. It's recommended to use 'puleInputKey' if you need to poll the input
every frame, like for player movement input.
`;

@struct PuleInputMouseButtonCallbackCreateInfo {
  @field callback : @fnptr(void, PuleInputMouse, PuleInputKeyModifier, bool);
};

@fn puleInputMouseButtonCallback(
  info : PuleInputMouseButtonCallbackCreateInfo
) void #`
callback for mouse input, for event-driven applications. It's recommended to
use 'puleInputMouse' if you need to poll input every frame, like for player
direction input.
`;

@struct PuleInputRawTextCallbackCreateInfo {
  @field callback : @fnptr(void, uint32_t);
};

@fn puleInputRawTextCallback(
  info : PuleInputRawTextCallbackCreateInfo
) void #`
  callback for text input, with UTF8 support, for text editors
`;

